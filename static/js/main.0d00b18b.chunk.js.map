{"version":3,"sources":["shared/styles/themes/colors.ts","shared/styles/base/global.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["COLOR_WHITE","COLOR_BACKGROUND","COLOR_YELLOW","COLOR_GRAY","COLOR_RED","COLOR_BLACK","COLOR_BLUE","COLOR_BORDER","GlobalStyle","createGlobalStyle","Header","loadable","MovieList","MovieDetail","App","path","Boolean","window","location","hostname","match","app","basename","root","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAA,gRAAO,IAAMA,EAAc,OACdC,EAAmB,UACnBC,EAAe,UACfC,EAAa,UACbC,EAAY,UACZC,EAAc,OACdC,EAAa,UACbC,EAAe,W,qmCCH5B,IAoDeC,EApDKC,YAAH,IAqCJT,IACWK,KCpClBK,EAASC,aAAS,kBAAM,gCACxBC,EAAYD,aAAS,kBAAM,sDAC3BE,EAAcF,aAAS,kBAC3B,sDAGa,SAASG,IACtB,OACE,kBAAC,WAAD,KACE,kBAACJ,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,KAAK,cACV,kBAACF,EAAD,OAEF,kBAAC,IAAD,CAAOE,KAAK,KACV,kBAACH,EAAD,QAGJ,kBAAC,EAAD,OCZcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACJ,kBAAC,IAAD,CAAQC,SAAS,eACf,kBAACR,EAAD,OAIES,EAAOC,SAASC,eAAe,QAErCC,iBAAOL,EAAKE,GD4HN,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.0d00b18b.chunk.js","sourcesContent":["export const COLOR_WHITE = '#fff';\nexport const COLOR_BACKGROUND = '#232323';\nexport const COLOR_YELLOW = '#ffe81f';\nexport const COLOR_GRAY = '#9d9d9d';\nexport const COLOR_RED = '#8e2e2e';\nexport const COLOR_BLACK = '#000';\nexport const COLOR_BLUE = '#2098d1';\nexport const COLOR_BORDER = '#3c3c3c';\n","import { createGlobalStyle } from 'styled-components';\n\nimport { COLOR_WHITE, COLOR_BLACK } from '../themes/colors';\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: 'Star Jedi';\n    font-style: normal;\n    font-weight: 400;\n    src: local('Star Jedi'), local('StarJedi'),\n      url('../component/assets/fonts/Starjedi.ttf') format('truetype');\n    display: swap;\n  }\n\n  *,\n  *::before,\n  *::after {\n    margin: 0;\n    padding: 0;\n    box-sizing: inherit;\n  }\n\n  html {\n    font-size: 62.5%;\n    box-sizing: border-box;\n\n    /* 768px */\n    @media screen and (max-width: 48em) {\n      font-size: 56.25%;\n    }\n\n    /* 576px */\n    @media screen and (max-width: 36em) {\n      font-size: 50%;\n    }\n  }\n\n  body {\n    font-family: 'Open Sans', sans-serif;\n    font-size: 1.6rem;\n    overflow-y: scroll;\n    color: ${COLOR_WHITE};\n    background-color: ${COLOR_BLACK};\n    padding-bottom: 2rem;\n  }\n\n  a,\n  a:link,\n  a:hover,\n  a:focus {\n    color: currentColor;\n    text-decoration: none;\n    cursor: pointer;\n  }\n`;\n\nexport default GlobalStyle;\n","import React, { Fragment } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport loadable from '@loadable/component';\n\nimport GlobalStyle from './shared/styles/base/global';\n\nconst Header = loadable(() => import('./components/Header/Header'));\nconst MovieList = loadable(() => import('./components/MovieList/MovieList'));\nconst MovieDetail = loadable(() =>\n  import('./components/MovieDetail/MovieDetail')\n);\n\nexport default function App() {\n  return (\n    <Fragment>\n      <Header />\n      <Switch>\n        <Route path='/movie/:id'>\n          <MovieDetail />\n        </Route>\n        <Route path='/'>\n          <MovieList />\n        </Route>\n      </Switch>\n      <GlobalStyle />\n    </Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      // eslint-disable-next-line\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n  <Router basename='/swapi-task'>\n    <App />\n  </Router>\n);\n\nconst root = document.getElementById('root');\n\nrender(app, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}